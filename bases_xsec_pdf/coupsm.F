      subroutine coupsm(idef)
c
c This subroutine sets up the coupling constants of the STANDARD MODEL.
c
c input:
c       real    sin2w             : square of sine of the weak angle
c       real    alpha             : EM fine structure constant
c       real    Gfermi            : G_Fermi
c       real    zmass,wmass       : weak boson masses
c                                 : ONLY zmass OR wmass is input;
c                                 : the other is calculated
c       real    hmass             : Higgs mass
c       real    zwidth            : Z boson width
c       real    tmass,bmass,lmass : fermion masses
c       real    xzmass, xwmass    : mass of Goldstone bosons
c
c output:
c       real    gw                : weak coupling constant
c       real    gwwa              : dimensionless WWA  coupling
c       real    gwwz              : dimensionless WWZ  coupling
c       complex gwwh              : dimensionful  WWH  coupling
c       complex gzzh              : dimensionful  ZZH  coupling
c       complex ghhh              : dimensionful  HHH  coupling
c       complex gwwhh             : dimensionful  WWHH coupling
c       complex gzzhh             : dimensionful  ZZHH coupling
c       complex ghhhh             : dimensionless HHHH coupling
c       complex ghtop(2)          : Yukawa coupling of (L,R) top   quark
c       complex ghbot(2)          : Yukawa coupling of (L,R) bottom quark
c       complex ghtau(2)          : Yukawa coupling of (L,R) tau  lepton
c       complex gal(2)            : coupling with A of charged leptons
c       complex gau(2)            : coupling with A of up-type quarks
c       complex gad(2)            : coupling with A of down-type quarks
c       complex gwf(2)            : coupling with W-,W+ of fermions
c       complex gzn(2)            : coupling with Z of neutrinos
c       complex gzl(2)            : coupling with Z of charged leptons
c       complex gzu(2)            : coupling with Z of up-type quarks
c       complex gzd(2)            : coupling with Z of down-type quarks
c       real    g                 : QCD 3-,4-gluon coupling
c       complex gg(2)             : QCD gqq coupling (L,R)
c       complex xzhz              : Goldstone z   coupling  to ZH
c       complex xwhwp,xwhwm       : Goldstone w+- couplings to WH
c       complex xwzwp,xwzwm       : Goldstone w+- couplings to WZ
c       complex xwawp,xwawm       : Goldstone w+- couplings to WA
c       complex xwzhwp,xwzhwm     : Goldstone w+- couplings to WZH
c       complex xwahwp,xwahwm     : Goldstone w+- couplings to WAH
c       complex xwpq,xwpl         : Goldstone w+  couplings to t,b,tau
c       complex xwmq,xwml         : Goldstone w-  couplings to t,b,tau
c       complex xzt,xzb,xzl       : Goldstone z   couplings to t,b,tau
c
c ----------------------------------------------------------------------
c
c input parameters
c
      implicit none
      integer  idef
c
c calculated couplings
c
      include 'coupl.inc'
      double precision  ee2, ez, ey, sw, cw, sc2, v, rho, alphas
      double precision  gwne, gwud, lambda, lam4, xt, rew, rqcd
      double precision  decw, w_w_nl, w_w_tau, w_w_ud, w_w_cs
      double precision  decz, w_z_nn, w_z_ll, w_z_tau
      double precision  w_z_uu, w_z_dd, w_z_cc, w_z_bb
      double precision  heavy, a, b, c, dum
      double precision  alpha_s, alfa, alfaw, mfrun
      external          alpha_s, alfa, alfaw, mfrun
c
c predefined SM parameters (these values may change over time)
c
      double precision  mz, wz, mh
      double precision  mt, wt, mb, ml
      double precision  hals, hale, hss, hgfermi
      parameter( mz = 91.188d0, wz = 2.495d0 )
      parameter( mh = 120.0d0 )
      parameter( mt = 174.3d0, mb = 5.279d0, ml = 1.777d0 )
      parameter( hals = 0.1185d0, hale = 1d0/128.9d0 )
      parameter( hss = 0.2312d0, hgfermi = 1.16639d-5 )
C      parameter( lam4 = 0.15679d0 ) ! for alphas(M_Z) = 0.119
      parameter( lam4 = 0.1525d0 ) ! for alphas(M_Z) = 0.1185
c
c HDECAY variables
c
      integer           ihiggs, nnlo, ipole
      common /flag/     ihiggs, nnlo, ipole
      integer           ionsh, ionwz, iofsusy
      common /onshell/  ionsh, ionwz, iofsusy
      double precision  gf, alph, almass, ammuon, amz, amw
      common /param/    gf, alph, almass, ammuon, amz, amw
      double precision  ams, amc, amb, amt
      common /masses/   ams, amc, amb, amt
      double precision  gamc0, gamt0, gamt1, gamw, gamz
      common /wzwdth/   gamc0, gamt0, gamt1, gamw, gamz
      double precision  hdals, hdmhbeg, hdmhend, tgbet
      common /hdparms/  hdals, hdmhbeg, hdmhend, tgbet
      double precision  SMBRB,SMBRL,SMBRM,SMBRS,SMBRC,SMBRT,
     &                  SMBRG,SMBRGA,SMBRZGA,SMBRW,SMBRZ,SMWDTH
      common /widthsm/  SMBRB,SMBRL,SMBRM,SMBRS,SMBRC,SMBRT,
     &                  SMBRG,SMBRGA,SMBRZGA,SMBRW,SMBRZ,SMWDTH
c
c constants
c
      double complex  ci
      parameter( ci = ( 0.0d0, 1.0d0 ) )
      double precision  Zero, One, Two, Three, Four, Half, Rt2
      parameter( Zero = 0.0d0, One = 1.0d0, Two = 2.0d0 )
      parameter( Three = 3.0d0, Four = 4.0d0, Half = 0.5d0 )
      double precision  Pi, Fourpi
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Fourpi = Four * Pi )
c
c define phase space reduction factor for heavy fermionic decays
c
      heavy(a,b,c) = ( One - Half*(b**2+c**2) - Half*(b**2-c**2)**2
     &                 + Three*b*c*(a**2 - One)/(a**2 + One)        )
     &               * sqrt( (One-b**2-c**2)**2 - Four * b**2 * c**2 )
c
c convenient parameter
c
      Rt2 = sqrt(Two)
c
c HELAS_CHECK mandatory tree-level relations
c
#ifdef HELAS_CHECK
      idef = 0
#endif
c
c mass & width catches
c
      if ( hmass.le.Zero ) hmass = mh
      if ( tmass.le.Zero .or. idef.eq.0 ) tmass = mt
      if ( bmass.le.Zero .or. idef.eq.0 ) bmass = mb
      if ( lmass.le.Zero .or. idef.eq.0 ) lmass = ml
      if ( gfermi.le.Zero ) gfermi = hgfermi
c
c option 0 - use predefined MSbar values with tree-level relations
c
      if ( idef.eq.0 ) then
         write(6,*)
         write(6,*) '================================================'
         write(6,*) '| HELAS COUPSM called with option 0 (default): |'
         write(6,*) '| predefined MS-bar parameters will be used,   |'
         write(6,*) '| all parameters calculated at tree level.     |'
         write(6,*) '================================================'
         write(6,*)
         write(6,*) 'Hardwired SM inputs:'
         write(6,17) '  sin^2(W) = ', hss
         write(6,17) '  1/alpha  = ', One/hale
         write(6,18) '  M_Z      = ', mz
         write(6,18) '  Gamma_Z  = ', wz
         write(6,18) '  m_top    = ', mt
         write(6,18) '  m_bot    = ', mb
         write(6,18) '  m_tau    = ', ml
         write(6,17) '  alpha_s  = ', hals
         write(6,*)

         sin2w  = hss
         cw     = sqrt( One - sin2w )
         alpha  = hale
         ee2    = alpha * Fourpi
         alphas = hals

         zmass  = mz
         zwidth = wz
         wmass  = zmass * cw
c
c option 1 - allow user to select MZ/MW,s2w,alpha,GFermi inputs in OS scheme
c
      else if ( idef.eq.1 ) then
         write(6,*)
         write(6,*) '==============================================='
         write(6,*) '| HELAS COUPSM called with option 1:          |'
         write(6,*) '| user inputs 3 selected basic SM parameters, |'
         write(6,*) '| all others calculated at tree level.        |'
         write(6,*) '==============================================='
         write(6,*)
         write(6,*) 'Inputs are:'

         alphas = alfas

         if ( zmass.gt.Zero ) then
            write(6,18) '  M_Z      = ', zmass
            if ( wmass.gt.Zero ) then
               write(6,18) '  M_W      = ', wmass
               if ( sin2w.gt.Zero ) then
                  write(6,*) '*** invalid set of 3 input parameters ***'
                  write(6,*) '*** (or call routine with option 3)   ***'
                  stop
               else
                  cw = wmass/zmass
                  sin2w = One - cw**2
               end if
               if ( alpha.gt.7.246d-3 ) then
                  write(6,17) '  1/alpha  = ', One/alpha
               else
                  write(6,*) '*** invalid input - alpha not set ***'
                  stop
               end if
            else if ( sin2w.gt.Zero .and. alpha.gt.7.246d-3 ) then
               write(6,17) '  1/alpha  = ', One/alpha
               write(6,17) '  sin^2(W) = ', sin2w
               cw = sqrt( One - sin2w )
               wmass = zmass * cw
            else if ( gfermi.gt.Zero .and. alpha.gt.7.246d-3 ) then
               write(6,17) '  1/alpha  = ', One/alpha
               write(6,*) '  G_Fermi  = ', gfermi
               dum = zmass**2 * Half
     &               + sqrt(   zmass**4/Four
     &                       - Pi*alpha*zmass**2/(Rt2*gfermi) )
               wmass = sqrt(dum)
               cw = wmass/zmass
               sin2w = One - cw**2
               sw = sqrt(sin2w)
            else
               write(6,*) '*** invalid set of 3 input parameters ***'
               stop
            end if
         else if ( wmass.gt.Zero .and. sin2w.gt.Zero
     &                           .and. alpha.gt.7.246d-3 ) then
            write(6,18) '  M_W      = ', wmass
            write(6,17) '  1/alpha  = ', One/alpha
            write(6,17) '  sin^2(W) = ', sin2w
            cw = sqrt( One - sin2w )
            zmass = wmass / cw
         else
            write(6,*) '*** ERROR in COUPSM inputs - halting ***'
            stop
         end if
         write(6,*)
         ee2 = alpha * Fourpi
c
c option 2 - MS-bar scheme, uses rho <> 1
c
      else if ( idef.eq.2 ) then
         write(6,*)
         write(6,*) '================================================='
         write(6,*) '| HELAS COUPSM called with option 2:            |'
         write(6,*) '| predefined MS-bar parameters will be used     |'
         write(6,*) '| (except alpha_s, taken as input from user) -  |'
         write(6,*) '| all parameters calculated w/ rho corrections. |'
         write(6,*) '| Gauge invariance not guaranteed!!!            |'
         write(6,*) '================================================='
         write(6,*)

         sin2w = hss
         gfermi = hgfermi
         cw = sqrt( One - sin2w )
         alphas = alfas
         zwidth = wz

         xt   = gfermi * ( tmass / Pi )**2 / 8.0d0 / sqrt( Two )
         dum  = alpha_s(tmass**2,lam4,1) / Pi
         rew  = - xt * ( 0.73921d0 + 12.56637d0*hmass/tmass )
         rqcd = - 0.19325d0*dum - 3.9696d0*dum**2
         rho  = One / ( One - Three*xt*( One + rew + rqcd ) )
         write(6,*) 'rho  = ',rho
         write(6,*)
         wmass = sqrt(rho) * zmass * cw
         ee2 = Four*Rt2 * gfermi * sin2w * wmass**2
         alpha = ee2 / Fourpi
c
c option 3 - user must set MZ,MW,sin2w,alpha and know what they're doing!
c
      else if ( idef.eq.3 ) then
         write(6,*)
         write(6,*) '==========================================='
         write(6,*) '| HELAS COUPSM called with option 3:      |'
         write(6,*) '| user inputs M_Z,M_W,sin^2(thetaW),alpha |'
         write(6,*) '| and must know what they are doing.      |'
         write(6,*) '| Gauge invariance not guaranteed!!!      |'
         write(6,*) '==========================================='
         write(6,*)

         if ( sin2w.le.Zero ) then
            write(6,*) '*** sin^2(theta_W) undefined ***'
            stop
         end if
         if ( zmass.le.Zero ) then
            write(6,*) '*** M_Z undefined ***'
            stop
         end if
         if ( wmass.le.Zero ) then
            write(6,*) '*** M_W undefined ***'
            stop
         end if
         if ( alpha.le.Zero ) then
            write(6,*) '*** alpha undefined ***'
            stop
         end if

         cw  = sqrt( One - sin2w )
         ee2 = alpha * Fourpi
c
c else error output and halt
c
      else
         write(6,*) '*** COUPSM called w/ invalid option - halting ***'
         stop
      end if
c
c top quark width
c
      twidth = Gfermi * tmass**3 / (8.0d0*Pi*Rt2)
     &         * ( One - (wmass/tmass)**2 )**2
     &         * ( One + Two*(wmass/tmass)**2 )
     &         * ( One-Two*alphas*(Two*Pi**2/Three-5.0d0/Two)/Three/Pi )
c
c useful values
c
      sw  = sqrt( sin2w )
      ee  = sqrt( ee2 )
      ez  = ee/(sw*cw)
      ey  = ee*(sw/cw)
      sc2 = sin2w*( One - sin2w )
      v   = Two*zmass*sqrt(sc2)/ee
      lambda = hmass**2 / (Two * v**2)
c
c vector boson couplings
c
      gw   = ee/sw
      gwwa = ee
      gwwz = ee*cw/sw
c
c gauge & higgs boson coupling constants
c
      gwwh  = dcmplx( ee2/sin2w*Half*v, Zero )
      gzzh  = dcmplx( ee2/sc2*Half*v, Zero )
      ghhh  = dcmplx( -hmass**2/v*Three, Zero )
      gwwhh = dcmplx( ee2/sin2w*Half, Zero )
      gzzhh = dcmplx( ee2/sc2*Half, Zero)
      ghhhh = ghhh/v
c
c fermion-fermion-vector couplings
c
      gal(1) = dcmplx(  ee          , Zero )
      gal(2) = dcmplx(  ee          , Zero )
      gau(1) = dcmplx( -ee*Two/Three, Zero )
      gau(2) = dcmplx( -ee*Two/Three, Zero )
      gad(1) = dcmplx(  ee/Three    , Zero )
      gad(2) = dcmplx(  ee/Three    , Zero )

      gwf(1) = dcmplx( -ee/sqrt(Two*sin2w), Zero )
      gwf(2) = dcmplx(  Zero              , Zero )

      gzn(1) = dcmplx( -ez*Half                     , Zero )
      gzn(2) = dcmplx(  Zero                        , Zero )
      gzl(1) = dcmplx( -ez*(-Half + sin2w)          , Zero )
      gzl(2) = dcmplx( -ey                          , Zero )
      gzu(1) = dcmplx( -ez*( Half - sin2w*Two/Three), Zero )
      gzu(2) = dcmplx(  ey*Two/Three                , Zero )
      gzd(1) = dcmplx( -ez*(-Half + sin2w/Three)    , Zero )
      gzd(2) = dcmplx( -ey/Three                    , Zero )
c
c fermion-fermion-Higgs couplings (complex) hff(2)
c
C      ghtop(1) = dcmplx( -tmass/v, Zero )
      write(6,15) 'top mass at Higgs mass = ',mfrun(167.0d0),' GeV'
      ghtop(1) = dcmplx( -mfrun(167.0d0)/v, Zero )
      ghtop(2) = ghtop(1)

C      ghbot(1) = dcmplx( -bmass/v, Zero )
      write(6,15) 'bot mass at Higgs mass = ',mfrun(4.25d0),' GeV'
      ghbot(1) = dcmplx( -mfrun(4.25d0)/v, Zero )
      ghbot(2) = ghbot(1)

C      ghtau(1) = dcmplx( -lmass/v, Zero )
      write(6,15) 'tau mass at Higgs mass = ',mfrun(lmass),' GeV'
      ghtau(1) = dcmplx( -mfrun(lmass)/v, Zero )
      ghtau(2) = ghtau(1)

      write(6,*)
c
c QCD couplings
c
      g = sqrt( Fourpi * alphas )
      gg(1) = dcmplx( -g, Zero )
      gg(2) = gg(1)
c
c Z boson width
c
      if ( idef.gt.0 ) then
         decz = zmass / ( 24.0d0 * Pi )
         w_z_nn = decz * ( gzn(1)**2 + gzn(2)**2 )
         w_z_ll = decz * ( gzl(1)**2 + gzl(2)**2 )
         decz = decz * Three * ( One + alphas/Pi )
         w_z_uu = decz * ( gzu(1)**2 + gzu(2)**2 )
         w_z_dd = decz * ( gzd(1)**2 + gzd(2)**2 )
         dum = dble( (gzl(2)+gzl(1))/(gzl(2)-gzl(1)) )
         w_z_tau = w_z_ll * heavy( dum, lmass/zmass, lmass/zmass )
         dum = dble( (gzu(2)+gzu(1))/(gzu(2)-gzu(1)) )
         w_z_cc = w_z_uu *  heavy( dum, cmass/zmass, cmass/zmass )
         dum = dble( (gzd(2)+gzd(1))/(gzd(2)-gzd(1)) )
         w_z_bb = w_z_dd *  heavy( dum, bmass/zmass, bmass/zmass )
         zwidth =   Three*w_z_nn + Two*w_z_ll + w_z_tau
     &            + Two*w_z_dd + w_z_uu + w_z_cc + w_z_bb
      end if
c
c W boson width
c
      decw = wmass / ( 24.0d0 * Pi )
      w_w_nl = decw * ( gwf(1)**2 + gwf(2)**2 )
      dum = dble( (gwf(2)+gwf(1))/(gwf(2)-gwf(1)) )
      w_w_tau = w_w_nl * heavy( dum, lmass/wmass, Zero )
      w_w_ud = w_w_nl * Three * ( One + alphas/Pi )
      w_w_cs = w_w_ud * heavy( dum, cmass/wmass, Zero )
      wwidth = Two*w_w_nl + w_w_tau + w_w_ud + w_w_cs
c
c interface to HDECAY
c
      ihiggs = 0
      nnlo   = 0
      ipole  = 0

      ionsh   = 0
      ionwz   = 0
      iofsusy = 1

      gf     = gfermi
      alph   = 137.0359895d0
      almass  = lmass
      ammuon = 0.105658389d0
      amz    = zmass
      amw    = wmass

      ams = 0.190d0
      amc = 1.42d0
      amb = 4.62d0
      amt = tmass

      gamw = wwidth
      gamz = zwidth

      hdals   = alphas
      hdmhbeg = hmass
      hdmhend = hmass

      call hdecay

      hwidth = SMWDTH
c
c Goldstone boson couplings
c
#ifdef HELAS_CHECK
c
c   masses
c
      xzmass = zmass
      xwmass = wmass
c
c   VHS - verified
c
      xzhz  = -ci*Half*gw/cw
      xwhwp = -ci*Half*gw
      xwhwm = dconjg(xwhwp)
c
c   VVS - verified
c
      xwzwp =  ci * gw * zmass * sin2w
      xwzwm = dconjg(xwzwp)
      xwawp = -ci * ee * wmass
      xwawm = dconjg(xwawp)
c
c   VVHS - verified
c
      xwzhwp =  ci * Half * gw**2 * sin2w / cw
      xwzhwm = dconjg(xwzhwp)
      xwahwp = -ci * Half * gw * ee
      xwahwm = dconjg(xwahwp)
c
c   FFS - verified
c
      ghtop(1) = dcmplx( -tmass/v, Zero )
      ghtop(2) = ghtop(1)

      ghbot(1) = dcmplx( -bmass/v, Zero )
      ghbot(2) = ghbot(1)

      ghtau(1) = dcmplx( -lmass/v, Zero )
      ghtau(2) = ghtau(1)

      xzt(1) = -ghtop(1)*ci
      xzt(2) = dconjg(xzt(1))
      xzb(1) =  ghbot(1)*ci
      xzb(2) = dconjg(xzb(1))
      xzl(1) =  ghtau(1)*ci
      xzl(2) = dconjg(xzl(1))

      xwpq(1) =  ci*Rt2*bmass/v
      xwpq(2) = -ci*Rt2*tmass/v
      xwmq(1) = -xwpq(2)
      xwmq(2) = -xwpq(1)
      xwpl(1) =  ci*Rt2*lmass/v
      xwpl(2) = Zero
      xwml(1) = Zero
      xwml(2) = -xwpl(1)
c
c override boson widths for BRS check
c
      hwidth = Zero
      zwidth = Zero
      wwidth = Zero
      twidth = Zero
c
c output BRS check acknowledgement
c
      write(6,*) '*** HELAS COUPSM in BRS check mode ***'
      write(6,*)
#endif
c
c output all info
c
 10   format( 1x,a,f7.3,' GeV        ',a,f7.4,' GeV' )
 11   format( 1x,a,f10.7,2x,f10.7,a,f10.7,2x,f10.7 )
 12   format( 1x,a,f6.2,a )
 13   format( 1x,a,f6.4,a )
 14   format( 1x,2(a,f10.7,', ',f10.7) )
 15   format( 1x,a,f9.5,a )
 16   format( 1x,a,f7.5 )
 17   format( 1x,a,f8.4 )
 18   format( 1x,a,f8.4,' GeV' )
 19   format( 1x,a,f6.4,a,f6.4 )
 20   format( 1x,a,f11.5,1x,f11.5 )

      write(6,*) '*** HELAS Standard Model parameters ***'
      write(6,*)
      write(6,12) '1/alpha = ',One/alpha,
     &            '  from input/MS-bar relations'
      write(6,12) '1/alpha = ',One/alfa(zmass**2),
     &            '  from 1-loop running at Q = M_Z'
      write(6,*)
      write(6,13) 'alpha_s = ',alphas,
     &            '  from input'
      write(6,13) 'alpha_s = ',alpha_s(zmass**2,lam4,1),
     &            '  from 1-loop running at Q = M_Z'
      write(6,*)
      write(6,13) 'sin^2(theta_W) =  ',sin2w
      write(6,*)
      write(6,10) 'Z mass  =  ',zmass, 'Z width  = ',zwidth
      write(6,10) 'W mass  =  ',wmass, 'W width  = ',wwidth
      write(6,10) 'H mass  =  ',hmass, 'H width  = ',hwidth
      write(6,*)
      write(6,10) 'top    mass  =  ', tmass, 'top    width  = ', twidth
      write(6,10) 'bottom mass  =  ', bmass, 'bottom width  = ', Zero
      write(6,10) 'charm  mass  =  ', cmass, 'charm  width  = ', Zero
      write(6,10) 'tau    mass  =  ', lmass, 'tau    width  = ', Zero
      write(6,*) 'all other quark and lepton masses set to zero'
      write(6,*)
      write(6,*) 'Boson couplings:'
      write(6,*)
      write(6,*) 'gw    = ', gw, '  from input/MS-bar relations'
      write(6,*) 'gw    = ', sqrt(Fourpi*alfaw(zmass**2,1)),
     &           '  from 1-loop running at Q = M_Z'
      write(6,*)
      write(6,20) 'gwwa  = ', gwwa
      write(6,20) 'gwwz  = ', gwwz
      write(6,20) 'gwwh  = ', gwwh
      write(6,20) 'gzzh  = ', gzzh
      write(6,20) 'ghhh  = ', ghhh
      write(6,*)
      write(6,20) 'gwwhh = ', gwwhh
      write(6,20) 'gzzhh = ', gzzhh
      write(6,20) 'ghhhh = ', ghhhh
      write(6,*)
      write(6,*) 'FFV couplings:'
      write(6,*)
      write(6,11) 'ggq(L)   =  ',gg(1),  '    ggq(R)   =  ',gg(2)
      write(6,*)
      write(6,11) 'gal(L)   =  ',gal(1), '    gal(R)   =  ',gal(2)
      write(6,11) 'gau(L)   =  ',gau(1), '    gau(R)   =  ',gau(2)
      write(6,11) 'gad(L)   =  ',gad(1), '    gad(R)   =  ',gad(2)
      write(6,*)
      write(6,11) 'gwf(L)   =  ',gwf(1), '    gwf(R)   =  ',gwf(2)
      write(6,*)
      write(6,11) 'gzn(L)   =  ',gzn(1), '    gzn(R)   =  ',gzn(2)
      write(6,11) 'gzl(L)   =  ',gzl(1), '    gzl(R)   =  ',gzl(2)
      write(6,11) 'gzu(L)   =  ',gzu(1), '    gzu(R)   =  ',gzu(2)
      write(6,11) 'gzd(L)   =  ',gzd(1), '    gzd(R)   =  ',gzd(2)
      write(6,*)
      write(6,*) 'FFH couplings:'
      write(6,*)
      write(6,14) 'gHtop(L) =  ',ghtop(1), '    gHtop(R) =  ',ghtop(2)
      write(6,14) 'gHbot(L) =  ',ghbot(1), '    gHbot(R) =  ',ghbot(2)
      write(6,14) 'gHtau(L) =  ',ghtau(1), '    gHtau(R) =  ',ghtau(2)
      write(6,*)
      if ( idef.gt.0 .and. zwidth.gt.Zero .and. wwidth.gt.Zero ) then
         write(6,*) 'Z,W partial widths and effective BRs:'
         write(6,*)
         write(6,19) 'width Z->nn  = ', w_z_nn,
     &               ' GeV,   BR(Z->nn)  = ', Three*w_z_nn/zwidth
         write(6,19) 'width Z->ll  = ', w_z_ll,
     &               ' GeV,   BR(Z->ll)  = ', Two*w_z_ll/zwidth
         write(6,19) 'width Z->TT  = ', w_z_tau,
     &               ' GeV,   BR(Z->TT)  = ', w_z_tau/zwidth
         write(6,19) 'width Z->uu  = ', w_z_uu,
     &               ' GeV,   BR(Z->uu)  = ', w_z_uu/zwidth
         write(6,19) 'width Z->dd  = ', w_z_dd,
     &               ' GeV,   BR(Z->dd)  = ', Two*w_z_dd/zwidth
         write(6,19) 'width Z->cc  = ', w_z_cc,
     &               ' GeV,   BR(Z->cc)  = ', w_z_cc/zwidth
         write(6,19) 'width Z->bb  = ', w_z_bb,
     &               ' GeV,   BR(Z->bb)  = ', w_z_bb/zwidth
         write(6,*)
         write(6,19) 'width W->nl  = ', w_w_nl,
     &               ' GeV,   BR(W->nl)  = ', Two*w_w_nl/wwidth
         write(6,19) 'width W->nl  = ', w_w_nl,
     &               ' GeV,   BR(W->nT)  = ', w_w_tau/wwidth
         write(6,19) 'width W->ud  = ', w_w_ud, 
     &               ' GeV,   BR(W->ud)  = ', w_w_ud/wwidth
         write(6,19) 'width W->cs  = ', w_w_cs, 
     &               ' GeV,   BR(W->cs)  = ', w_w_cs/wwidth
         write(6,*)
      end if
      write(6,*) 'HDECAY output for Higgs sector:'
      write(6,*)
      write(6,15) 'Higgs total width =  ', SMWDTH, ' GeV'
      write(6,*)
      write(6,16) 'BR (H -> bb~  ) =  ', SMBRB
      write(6,16) 'BR (H -> taus ) =  ', SMBRL
      write(6,16) 'BR (H -> muons) =  ', SMBRM
      write(6,16) 'BR (H -> ss~  ) =  ', SMBRS
      write(6,16) 'BR (H -> cc~  ) =  ', SMBRC
      write(6,16) 'BR (H -> tt~  ) =  ', SMBRT
      write(6,16) 'BR (H -> gg   ) =  ', SMBRG
      write(6,16) 'BR (H -> AA   ) =  ', SMBRGA
      write(6,16) 'BR (H -> ZA   ) =  ', SMBRZGA
      write(6,16) 'BR (H -> W+W- ) =  ', SMBRW
      write(6,16) 'BR (H -> ZZ   ) =  ', SMBRZ
      write(6,*)
#ifdef HELAS_CHECK
      write(6,*) 'BRS couplings:'
      write(6,*)
      write(6,10) 'xz mass =  ',zmass
      write(6,10) 'xw mass =  ',wmass
      write(6,*)
      write(6,20) 'VHS  ZHxz   = ',xzhz
      write(6,20) 'VHS  WHxwp  = ',xwhwp
      write(6,20) 'VHS  WHxwm  = ',xwhwm
      write(6,*)
      write(6,20) 'VVS  WZxwp  = ',xwzwp
      write(6,20) 'VVS  WZxwm  = ',xwzwm
      write(6,20) 'VVS  WAxwp  = ',xwawp
      write(6,20) 'VVS  WAxwm  = ',xwawm
      write(6,*)
      write(6,20) 'VVHS WZHxwp = ',xwzwp
      write(6,20) 'VVHS WZHxwm = ',xwzwm
      write(6,20) 'VVHS WAHxwp = ',xwawp
      write(6,20) 'VVHS WAHxwm = ',xwawm
      write(6,*)
      write(6,14) 'xztop(L) =  ',xzt(1), '    xztop(R) =  ',xzt(2)
      write(6,14) 'xzbot(L) =  ',xzb(1), '    xzbot(R) =  ',xzb(2)
      write(6,14) 'xztau(L) =  ',xzl(1), '    xztau(R) =  ',xzl(2)
      write(6,*)
      write(6,14) 'xwpq(L)  =  ',xwpq(1), '    xwpq(R)  =  ',xwpq(2)
      write(6,14) 'xwmq(L)  =  ',xwmq(1), '    xwpm(R)  =  ',xwmq(2)
      write(6,14) 'xwpl(L)  =  ',xwpl(1), '    xwpl(R)  =  ',xwpl(2)
      write(6,14) 'xwml(L)  =  ',xwml(1), '    xwml(R)  =  ',xwml(2)
      write(6,*)
#endif
ccc
      return
      end
C
C-----------------------------------------------------------------------------
C
      double precision function alpha_s( qsq,alam4,loop )
C
C-----------------------------------------------------------------------------
C
C	This function returns the 1, 2 or 3-loop value of alphas.
C
C	INPUT: 
C		qsq   = Q^2
C		alam4 = lambda for 4 active quark flavors
C		tmass  = top quark mass to determine lambda-6
C		loop  = # of loops for alphas (1, 2 or 3)
C
C-----------------------------------------------------------------------------
C
      implicit none
      double precision  qsq, alam4
      double precision  anf, alam, alamsq, alam5
      double precision  t, tt, b0, b1, b2, X, als
      double precision  pi
      Parameter( pi = 3.141592653589793238d0 )
      integer  loop
      include 'coupl.inc'
cc
      if ( qsq.lt.4.d0*bmass**2 ) then
         anf   = 4.d0
         alam  = alam4
      else if ( qsq.lt.4.d0*tmass**2 ) then
         anf   = 5.d0
         alam  = alam4*(alam4/(2.d0*bmass))**(2.0/23.0)
     &           *(log(4.d0*bmass**2/alam4**2))**(-963.d0/13225.d0)
      else
         anf   = 6.d0
         alam5 = alam4*(alam4/(2.0*bmass))**(2.d0/23.d0)
     &           *(log(4.d0*bmass**2/alam4**2))**(-963.d0/13225.d0)
         alam  = alam5*(alam5/(2.0*tmass))**(2.d0/21.d0)
     &           *(log(4.d0*tmass**2/alam5**2))**(-107.d0/1127.d0)
      end if
      b0 = 11.d0 - 2.d0*anf/3.d0
      alamsq = alam**2
      t = log(qsq/alamsq)
      if ( t.le.1.d0 ) t = log(4.d0/alamsq)
      als = 4.d0*pi/b0/t
      if ( loop.eq.1 ) then       ! 1 loop alphas
	 alpha_s = als
      else if ( loop.eq.2 ) then  ! 2 loop alphas
         b1 = 102.d0 - 38.d0*anf/3.d0
         X  = b1/(b0**2*t)
         tt = log(t)
         alpha_s  = als*(1.d0-X*tt)
      else if ( loop.eq.3 ) then  ! 3 loop alphas
         b1 = 102.d0 - 38.d0*anf/3.d0
         b2 = 0.5d0*(2857.d0 - 5033.d0*anf/9.d0 + (325.d0*anf**2)/27.d0)
         X  = b1/(b0**2*t)
         tt = log(t)
         alpha_s = als*(1.d0 - X*tt 
     &                 + X**2*((tt-0.5d0)**2 + b2*b0/b1**2 - 1.25d0))
      else
         write(6,*) ' WRONG LOOP NUMBER IN ALPHA-S EVALUATION!'
         stop
      end if
ccc
      return
      end
C
C-----------------------------------------------------------------------------
C
      double precision function alfa( qsq )
C
C-----------------------------------------------------------------------------
C
C	This function returns the 1-loop value of alpha.
C
C	INPUT: 
C		qsq   = Q^2
C
C-----------------------------------------------------------------------------
C
      implicit none
      double precision  qsq
      include 'coupl.inc'
c
c constants
c
      double precision  One, Three, Pi
      parameter( One = 1.0d0, Three = 3.0d0 )
      parameter( Pi = 3.14159265358979323846d0 )
cc
      alfa = alpha / ( 1.0d0 - alpha*dlog( qsq/zmass**2 ) /Three /Pi )
ccc
      return
      end
C
C-----------------------------------------------------------------------------
C
      double precision function alfaw( qsq,nh )
C
C-----------------------------------------------------------------------------
C
C	This function returns the 1-loop value of alpha_w.
C
C	INPUT: 
C		qsq = Q^2
C               nh  = # of Higgs doublets
C
C-----------------------------------------------------------------------------
C
      implicit none
      double precision  qsq, alphaw, dum
      integer  nh, nq
      include 'coupl.inc'
c
c constants
c
      double precision  Two, Four, Pi, Twpi
      parameter( Two = 2.0d0, Four = 4.0d0 )
      parameter( Pi = 3.14159265358979323846d0 )
      parameter( Twpi = 3.0d0*Four*Pi )
cc
      if ( qsq.ge.tmass**2 ) then
         nq = 6
      else
         nq = 5
      end if
      alphaw = gw**2 / Four / Pi
      dum = ( 22.0d0 - Four*nq - nh/Two ) / Twpi
      alfaw = alphaw / ( 1.0d0 + dum*alphaw*dlog( qsq/zmass**2 ) )
ccc
      return
      end
C
C-----------------------------------------------------------------------------
C
      double precision function mfrun( mf )
C
C-----------------------------------------------------------------------------
C
C	This function returns the 1-loop value of a fermion mass
C       at the scale of the Higgs mass.
C
C	INPUT: 
C		mf = mass of fermion at fermion mass scale
C
C-----------------------------------------------------------------------------
C
      implicit none
      double precision  mf, beta0, d0
      double precision  alpha_s
      external          alpha_s
      integer  nf
      include 'coupl.inc'
c
c constants
c
      double precision  One, Two, Three, Pi, a4
      parameter( One = 1.0d0, Two = 2.0d0, Three = 3.0d0 )
      parameter( Pi = 3.14159265358979323846d0, a4 = 0.1525d0 ) ! for 0.1185
cc
      if ( mf.gt.tmass ) then
         nf = 6
      else
         nf = 5
      end if
      beta0 = ( 33.0d0 - Two*nf ) / Three
      d0 = 4.0d0 / beta0
      mfrun = mf * ( alpha_s(hmass**2,a4,1)/alpha_s(mf**2,a4,1) )**d0
ccc
      return
      end
